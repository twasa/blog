<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on William&#39;s Blog</title>
    <link>https://twasa.github.io/categories/python/</link>
    <description>Recent content in Python on William&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Sep 2017 17:49:51 +0800</lastBuildDate>
    
	<atom:link href="https://twasa.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Timezone Convert example code</title>
      <link>https://twasa.github.io/post/python-timezone-convert/</link>
      <pubDate>Mon, 11 Sep 2017 17:49:51 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-timezone-convert/</guid>
      <description>Requirement  Python python-dateutil  example code from datetime import datetime from dateutil import tz # METHOD Auto-detect zones: #from_zone = tz.tzutc() #to_zone = tz.tzlocal() from_zone = raw_input(&amp;quot;From Timezone: &amp;quot;) to_zone = raw_input(&amp;quot;To Timezone: &amp;quot;) from_zone = tz.gettz(from_zone) to_zone = tz.gettz(to_zone) def datainput(): # utc = datetime.utcnow() year = raw_input(&amp;quot;Year (A.D.): &amp;quot;) month = raw_input(&amp;quot;Month: &amp;quot;) day = raw_input(&amp;quot;day: &amp;quot;) hour = raw_input(&amp;quot;hour: &amp;quot;) minute = raw_input(&amp;quot;minute: &amp;quot;) datetimestring = year + &#39;-&#39; + month + &#39;-&#39; + day + &#39; &#39; + hour + &#39;:&#39; + minute + &#39;:00&#39; return datetimestring dtstr = datainput() utc = datetime.</description>
    </item>
    
    <item>
      <title>Jupyterhub</title>
      <link>https://twasa.github.io/post/jupyterhub/</link>
      <pubDate>Mon, 11 Sep 2017 17:05:01 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/jupyterhub/</guid>
      <description>JupyterHub on CentOS 7 requirement  a Linux/Unix based system Python 3.4 or greater wget pip npm  install  yum search python3 yum -y install python3X yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel npm npm install -g configurable-http-proxy wget https://bootstrap.pypa.io/get-pip.py python3.X get-pip.py yum -y install python-devel python3X-devel pip3 install jupyterhub ipython[notebook]  startup  jupyterhub &amp;ndash;ip 0.0.0.0 &amp;ndash;port 8443 &amp;ndash;ssl-key my_ssl.key &amp;ndash;ssl-cert my_ssl.</description>
    </item>
    
    <item>
      <title>Python Web Automation Test</title>
      <link>https://twasa.github.io/post/python-web-automation-test/</link>
      <pubDate>Mon, 11 Sep 2017 13:40:40 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-web-automation-test/</guid>
      <description> Requirements  Python Selenium webdriver HTMLTestRunner  Sample code, test login to bugtracker and create html report from selenium import webdriver import unittest import time import HTMLTestRunner class test_class(unittest.TestCase): def setUp(self): self.verificationErrors=[] self.test=webdriver.Ie() self.url=&amp;quot;http://your.bugtracker.com/bug/&amp;quot; def test_login(self): pa=self.test pa.get(self.url) user=pa.find_element_by_id(&#39;username&#39;) user.send_keys(&#39;使用者帳號&#39;) passwd=pa.find_element_by_id(&#39;password&#39;) passwd.send_keys(&#39;密碼&#39;) pa.execute_script(&#39;loginsubmit()&#39;) time.sleep(10) def tearDown(self): pass if __name__==&amp;quot;__main__&amp;quot;: testsuite=unittest.TestSuite() testsuite.addTest(test_class(&amp;quot;test_login&amp;quot;)) filename=&amp;quot;r:\\result.html&amp;quot; fp=file(filename,&#39;wb&#39;) runner=HTMLTestRunner.HTMLTestRunner(stream=fp,title=&#39;Result&#39;,description=&#39;Test_Report&#39;) runner.run(testsuite)  </description>
    </item>
    
    <item>
      <title>A Python SOAP client sample code</title>
      <link>https://twasa.github.io/post/python-soap-client-suds/</link>
      <pubDate>Mon, 11 Sep 2017 13:37:20 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-soap-client-suds/</guid>
      <description>suds API references
 https://pypi.python.org/pypi/suds https://fedorahosted.org/suds/wiki/Documentation  example code
  import logging logging.basicConfig(level=logging.INFO) logging.getLogger(&#39;suds.client&#39;).setLevel(logging.DEBUG) username = &#39;&#39; password = &#39;&#39; no = 20787 def b64enc(username, password): import base64 base64string = base64.encodestring(&#39;%s:%s&#39; % (username, password)).replace(&#39;\n&#39;, &#39;&#39;) authenticationHeader = {&amp;quot;SOAPAction&amp;quot; : &amp;quot;ActionName&amp;quot;, &amp;quot;Authorization&amp;quot; : &amp;quot;Basic %s&amp;quot; % base64string } return authenticationHeader def xmlout(xmlstr): filename = &#39;%s.xml&#39; % no f = open(filename, &amp;quot;w&amp;quot;) f.write(xmlstr.encode(&#39;utf8&#39;)) def main(): from suds.client import Client wsdl_url = &#39;http://example.</description>
    </item>
    
    <item>
      <title>Python Package</title>
      <link>https://twasa.github.io/post/python-package/</link>
      <pubDate>Mon, 11 Sep 2017 13:21:51 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-package/</guid>
      <description>description  套件 (package) 是 Python 用資料夾組織模組 (module) 檔案的方式  例如我們寫了三個模組 module01.py module02.py module03.py
三個模組檔案放在 package01資料夾中，package01就是套件名稱 這時package01資料夾需要有額外一個 init.py init.py 可以不需要有任何內容 因為需要這個檔案，直譯器才能辨識package01為套件
另外寫一個 main.py 來利用 package01 中 module01.py 所定義的class(類別)或function(函數) 注意main.py 必須放在與 package 相同路徑下檔案結構如下
c:\packagedemo\package\module01.py c:\packagedemo\package\module03.py c:\packagedemo\package\module04.py c:\packagedemo\main.py  在main.py引入套件的部份，XXX可以是module01裡面的class(類別)或function(函數) from package.module01 import XXX
那麼 init.py 除了讓直譯器識別資料夾為套件之外有什麼作用呢？這裡，我們可以在 init.py 裡提供一個 all 變數，如下 all = [&amp;ldquo;module01&amp;rdquo;, &amp;ldquo;module02&amp;rdquo;, &amp;ldquo;module03&amp;rdquo;];
當 all 被定義後，寫 from package import *
才能保證 module01 、 module02 及 module03 三個模組都被引入。</description>
    </item>
    
    <item>
      <title>Python Virtualenv</title>
      <link>https://twasa.github.io/post/python-virtualenv/</link>
      <pubDate>Sun, 10 Sep 2017 17:00:56 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-virtualenv/</guid>
      <description> Virtualenv的好處  可以隔離函數庫需求不同的專案，讓它們不會互相影響。在建立並啟動虛擬環境後，透過 pip 安裝的套件會被放在虛擬環境中，專案就可以擁有一個獨立的環境。 在沒有權限的情況下安裝新套件 不同專案可以使用不同版本的相同套件 套件版本升級時不會影響其他專案  安裝 pip install virtualenv  建立專案資料夾 mkdir myproject cd myproject  初始化 virtualenv 虛擬環境名稱  activate the corresponding environment #linux . 虛擬環境名稱/bin/activate #windows 虛擬環境名稱\scripts\activate  這時候再裝要使用的Python Package pip install XXXX  回到實際環境 deactivate  若因為專案資料夾搬移或更名,請重新locate cd /path/to/your_project_new_dir virtualenv --relocatable your_virtualenv_name  </description>
    </item>
    
    <item>
      <title>Python HTML Entity decode and encode</title>
      <link>https://twasa.github.io/post/python-html-entity/</link>
      <pubDate>Sun, 10 Sep 2017 16:14:36 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/python-html-entity/</guid>
      <description>–– coding: utf-8 – #decode import HTMLParser h = HTMLParser.HTMLParser() print h.unescape(&#39;&amp;amp;#35377;&amp;amp;#21151;&amp;amp;#33995;&#39;) 許功蓋 #encode a = u&#39;許功蓋&#39; a.encode(&#39;ascii&#39;, &#39;xmlcharrefreplace&#39;) &#39;&amp;amp;#35377;&amp;amp;#21151;&amp;amp;#33995;&#39;  </description>
    </item>
    
    <item>
      <title>Flask Quick Start Guide</title>
      <link>https://twasa.github.io/post/flask-quick-start-guide/</link>
      <pubDate>Sun, 10 Sep 2017 15:47:02 +0800</pubDate>
      
      <guid>https://twasa.github.io/post/flask-quick-start-guide/</guid>
      <description>#Flask Quickstart
Requirements  Python Pip virtualenv Flask : a web development framework Werkzeug：a toolkit for WSGI Jinja2：renders templates  virtualenv：multiple side-by-side installations of Python  安裝：pip install virtualenv 基本使用方式：  ### 先建立專案資料夾 mkdir myproject cd myproject ### 初始化 virtualenv env ### activate the corresponding environment . venv/bin/activate or venv\scripts\activate ### 這時候再裝Flask pip install Flask ### 回到實際環境 deactivate ### 若因為目錄搬移或更名 需重新locate cd /path/to/your_project_new_dir virtualenv --relocatable your_virtualenv_name  建立第一個app(記得啟動venv), save it as hello.</description>
    </item>
    
  </channel>
</rss>