<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on William&#39;s blog</title>
    <link>https://blog.twasa.cf/linux/</link>
    <description>Recent content in Linuxes on William&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Sep 2017 17:12:29 +0800</lastBuildDate>
    
	<atom:link href="https://blog.twasa.cf/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>openssl</title>
      <link>https://blog.twasa.cf/linux/openssl/</link>
      <pubDate>Mon, 11 Sep 2017 17:12:29 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/openssl/</guid>
      <description> create private key openssl genrsa -out server.key 2048  create Certificate Signing Request openssl req -sha512 -new -key server.key -out server.csr -subj &amp;quot;/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=www.example.com&amp;quot;  check csr info openssl req -in server.csr -noout -text  Self-Sign Certificate openssl x509 -sha512 -req -days 3650 -in server.csr -signkey server.key -out server.crt  encrypt private key -a 表示檔案使用 base64 編碼 -salt 加雜湊值，增加安全性 openssl aes-256-cbc -a -salt -in server.key -out server.encrypt.key  </description>
    </item>
    
    <item>
      <title>Linux Logrotation</title>
      <link>https://blog.twasa.cf/linux/logrotation/</link>
      <pubDate>Mon, 11 Sep 2017 17:08:34 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/logrotation/</guid>
      <description> config options rotate count  rotate n  permission  create 0664 USER GROUP  by interval  daily weekly monthly yearly  by size  size 100k size 100M size 100G  archive  compress nocompress  Postrotate postrotate /usr/sbin/apachectl restart &amp;gt; /dev/null endscript
script  prerotate：executed before the log file is rotated postrotate：在做完 logrotate 之後啟動的指令，例如重新啟動 (kill -1 或 kill -HUP) 某個服務;  postrotate /bin/kill -HUP `cat /var/run/syslogd.pid 2&amp;gt; /dev/null` 2&amp;gt; /dev/null || true endscript }   others  missingok：If the log file is missing, go on to the next one without issu-ing an error message  </description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://blog.twasa.cf/linux/sed/</link>
      <pubDate>Mon, 11 Sep 2017 12:54:56 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/sed/</guid>
      <description> reference  https://www.gnu.org/software/sed/manual/sed.html http://www.gnu.org/software/sed/manual/sed.html#Examples  syntax sed OPTIONS... [SCRIPT] [INPUTFILE...] STDOUT | sed OPTIONS... [SCRIPT]  OPTIONS -i edited in-place  SCRIPT format &#39;起始行數,結束行數 指令/要被取代的字串/新字串/旗標&#39;  指令： s 搜尋並取代
旗標 g 取代全部 c 取代前詢問是否confirm I 忽略 pattern 大小寫
example modify CentOS linux hostname sed -i &#39;s/HOSTNAME\=.*/HOSTNAME\=NEWHOSTNAME/g&#39; /etc/sysconfig/network  change default delimiter 改用 &amp;ldquo;:&amp;rdquo; sed &#39;s:orig:NEW:&#39;  改用 &amp;ldquo;#&amp;rdquo; 當delimiter sed -e &#39;s#/#\\#g&#39;  </description>
    </item>
    
    <item>
      <title>Regular Expression</title>
      <link>https://blog.twasa.cf/linux/regexp/</link>
      <pubDate>Mon, 11 Sep 2017 11:46:21 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/regexp/</guid>
      <description>Regula Express  reference :     說明及範例 比對不成立之字串     /a/ 含字母 “a” 的字串，例如 “ab”, “bac”, “cba” “xyz”   /a./ 含字母 “a” 以及其後任一個字元的字串，例如 “ab”, “bac”（若要比對.，請使用 .） “a”, “ba”   /^xy/ 以 “xy” 開始的字串，例如 “xyz”, “xyab”（若要比對 ^，請使用 \^） “axy”, “bxy”   /xy$/ 以 “xy” 結尾的字串，例如 “axy”, “abxy”以 “xy” 結尾的字串，例如 “axy”, “abxy” （若要比對 $，請使用 \$） “xya”, “xyb”   [13579] 包含 “1” 或 “3” 或 “5” 或 “7” 或 “9” 的字串，例如：”a3b”, “1xy” “y2k”   [0-9] 含數字之字串 不含數字之字串   [a-z0-9] 含數字或小寫字母之字串 不含數字及小寫字母之字串   [a-zA-Z0-9] 含數字或字母之字串 不含數字及字母之字串   b[aeiou]t “bat”, “bet”, “bit”, “bot”, “but” “bxt”, “bzt”   [^0-9] 不含數字之字串（若要比對 ^，請使用 \^） 含數字之字串   [^aeiouAEIOU] 不含母音之字串（若要比對 ^，請使用 \^） 含母音之字串   [^\^] 不含 “^” 之字串，例如 “xyz”, “abc” “xy^”, “a^bc”       正規表示式的特定字元 說明 等效的正規表示式     \d 數字 [0-9]   \D 非數字 [^0-9]   \w 數字、字母、底線 [a-zA-Z0-9_]   \W 非 \w [^a-zA-Z0-9_]   \s 空白字元 [ \r\t\n\f]   \S 非空白字元 [^ \r\t\n\f]       正規表示式 說明     /a?</description>
    </item>
    
    <item>
      <title>find</title>
      <link>https://blog.twasa.cf/linux/find/</link>
      <pubDate>Mon, 11 Sep 2017 11:43:41 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/find/</guid>
      <description>find description  search for files in a directory hierarchy  syntax find [options] [path...] [expression] --newerXY Compares the timestamp of the current file with reference. The reference argument is normally the name of a file (and one of its timestamps is used for the comparison) but it may also be a string describing an absolute time. X and Y are placeholders for other letters, and these letters select which time belonging to how reference is used for the comparison find file modified newer than some daytimes find /var/log -newermt &#39;2016-06-01T00:00:00&#39; -name pattern Base of file name (the path with the leading directories removed) matches shell pattern pattern.</description>
    </item>
    
    <item>
      <title>xargs</title>
      <link>https://blog.twasa.cf/linux/xargs/</link>
      <pubDate>Mon, 11 Sep 2017 11:32:12 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/xargs/</guid>
      <description>xargs description  build and execute command lines from standard input  syntax and examples  Find all .log files in or below the current directory and process them  find . -name &amp;quot;*.log&amp;quot; -type f -print | xargs tar -cvf logs.tar find . -name &amp;quot;*.log&amp;quot; -type f -print | xargs -i -p cp -a {} /some/place find . -name &amp;quot;*.log&amp;quot; -type f -print | xargs -I [] cp -a [] /some/place -p Prompt the user about whether to run each command line and read a line from the terminal.</description>
    </item>
    
    <item>
      <title>Grep</title>
      <link>https://blog.twasa.cf/linux/grep/</link>
      <pubDate>Mon, 11 Sep 2017 10:52:53 +0800</pubDate>
      
      <guid>https://blog.twasa.cf/linux/grep/</guid>
      <description>description  prints lines that contain a match for a pattern reference  https://www.gnu.org/software/grep/manual/grep.html   syntax grep [OPTIONS] PATTERN [FILE...] grep multiple patterns OR grep &#39;pattern1\|pattern2\|pattern3&#39; AND grep -E &#39;pattern1.*pattern2.*pattern3&#39; filename -v, --invert-match Invert the sense of matching, to select non-matching lines. (-v is specified by POSIX .) grep -v &#39;unwanted_word&#39; -i, --ignore-case Ignore case distinctions in both the PATTERN and the input files. (-i is specified by POSIX .</description>
    </item>
    
  </channel>
</rss>